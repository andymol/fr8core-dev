using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using Fr8.Infrastructure.Data.DataTransferObjects;
using Fr8.Infrastructure.Interfaces;
using Fr8.Infrastructure.Utilities.Configuration;
using Fr8.TerminalBase.Errors;
using Newtonsoft.Json.Linq;
using terminalFacebook.Interfaces;
using terminalFacebook.Models;

namespace terminalFacebook.Services
{
    public class FacebookIntegration : IFacebookIntegration
    {
        private readonly IRestfulServiceClient _rsc;
        private const string FbRootUrl = "https://www.facebook.com";
        private const string FbApiVersion = "v2.6";
        private string FbRootApiUrl => $"https://graph.facebook.com/{FbApiVersion}/";
        public FacebookIntegration(IRestfulServiceClient rsc)
        {
            _rsc = rsc;
        }

        public async Task<FacebookPost> GetPostById(string oauthToken, string postId)
        {
            var postData = await _rsc.GetAsync<GraphApiPostReply>(GetAbsoluteUri($"me/feed?id={postId}", oauthToken));
            return postData?.data.FirstOrDefault();
        }

        /// <summary>
        /// Build external Facebook OAuth url.
        /// </summary>
        public string CreateAuthUrl(string externalStateToken)
        {
            var clientId = CloudConfigurationManager.GetSetting("FacebookId");
            var redirectUri = CloudConfigurationManager.GetSetting("HubOAuthRedirectUri");
            var scope = "email, publish_actions, user_posts, user_friends";
            var oAuthLoginUrl = $"{FbRootUrl}/dialog/oauth?" +
                                $"client_id={clientId}&redirect_uri={Uri.EscapeDataString(redirectUri)}&response_type=code&scope={Uri.EscapeDataString(scope)}&state={externalStateToken}";
            return oAuthLoginUrl;
        }

        private Uri GetAbsoluteUri(string path, string accessToken = null)
        {
            if (accessToken != null)
            {
                if (path.Contains("?"))
                {
                    path += "&access_token=" + accessToken;
                }
                else
                {
                    path += "?access_token=" + accessToken;
                }
            }
            return new Uri(FbRootApiUrl + path);
        }

        public async Task<string> GetOAuthToken(string code)
        {
            var oauthParams = new {
                client_id = CloudConfigurationManager.GetSetting("FacebookId"),
                client_secret = CloudConfigurationManager.GetSetting("FacebookSecret"),
                redirect_uri = CloudConfigurationManager.GetSetting("HubOAuthRedirectUri"),
                code = code
            };
            var result = await _rsc.PostAsync<object, dynamic>(GetAbsoluteUri("oauth/access_token"), oauthParams);
            return result.access_token;
        }

        public async Task<UserInfo> GetUserInfo(string oauthToken)
        {
            dynamic userInfo = await _rsc.GetAsync<dynamic>(GetAbsoluteUri("me?fields=first_name,last_name,id,email", oauthToken));
            return new UserInfo
            {
                UserId = userInfo.id,
                UserName = userInfo.first_name + " " + userInfo.last_name
            };
        }

        public async Task PostToTimeline(string oauthToken, string message)
        {
            var post = new
            {
                message = message,
                caption = "Generated by Fr8",
                description = "Fr8",
            };
            await _rsc.PostAsync<dynamic>(GetAbsoluteUri("me/feed", oauthToken), post);
        }
    }
}